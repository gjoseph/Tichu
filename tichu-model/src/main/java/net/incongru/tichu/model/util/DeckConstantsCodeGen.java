package net.incongru.tichu.model.util;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Instant;
import java.util.Set;
import java.util.TreeSet;
import net.incongru.tichu.model.CardDeck;
import net.incongru.tichu.model.card.Card;
import net.incongru.tichu.model.card.CardComparators;

public class DeckConstantsCodeGen {

    // Generates code for DeckConstants
    public static void main(String[] args) throws IOException {
        // CardDeck shuffles, so we force order the cards here.
        final Set<Card> cards = new TreeSet<>(CardComparators.BY_SUIT);
        final CardDeck deck = new CardDeck();
        cards.addAll(deck.allRemaining());

        replaceCodeGenSectionInFile(
            Path.of(
                "tichu-model/src/main/java/net/incongru/tichu/model/util/DeckConstants.java"
            ),
            generateJavaConstants(cards)
        );

        replaceCodeGenSectionInFile(
            Path.of("tichu-clients/packages/tichu-client-ts-lib/src/cards.ts"),
            generateTypescriptConstants(cards)
        );
    }

    private static void replaceCodeGenSectionInFile(
        Path srcPath,
        String newSourceCode
    ) throws IOException {
        final String oldSourceCode = Files.readString(srcPath);
        System.out.println(
            "Loaded " + srcPath + "(" + oldSourceCode.length() + " chars)"
        );
        final String newSrc = oldSourceCode.replaceFirst(
            "(?s)(?m)// ==== Start CodeGen(.*)// ==== End CodeGen",
            newSourceCode.trim()
        );
        Files.writeString(srcPath, newSrc, StandardCharsets.UTF_8);
        System.out.println(
            "Written " + srcPath + "(" + newSrc.length() + " chars)"
        );
    }

    private static String generateJavaConstants(Set<Card> cards) {
        final StringWriter stringWriter = new StringWriter();
        final PrintWriter out = new PrintWriter(stringWriter);
        out.println();
        out.println(
            "    // ==== Start CodeGen -- this was generated by %s on %s".formatted(
                DeckConstantsCodeGen.class,
                Instant.now()
            )
        );
        out.println("    // prettier-ignore");
        out.println("    public static final Card");
        for (Card card : cards) {
            final String constName;
            if (card.val().isSpecial()) {
                constName = card.val().niceName();
                out.println(
                    "            %s = Card.of(CardSpecials.%s),".formatted(
                        constName,
                        card.val()
                    )
                );
            } else {
                constName = card.suit() + "_" + card.val().niceName();
                out.println(
                    "            %s = Card.of(CardNumbers.%s, CardSuit.%s),".formatted(
                        constName,
                        card.val(),
                        card.suit()
                    )
                );
            }
            final String shortAlias = card.shortName().replace('*', '_');
            out.println(
                "            %s = %s,".formatted(shortAlias, constName)
            );

            // "10" cards have a 2-char shortnames like others, but we also want a nice constant
            if (card.val().shortName() == '0') {
                final String short10 = card.shortName().replace("0", "10");
                out.println(
                    "            %s = %s,".formatted(short10, constName)
                );
            }
        }
        // alt. name for Dog
        out.println("            Hound = Dog;");
        out.println("    // ==== End CodeGen");
        out.println();

        return stringWriter.toString();
    }

    private static String generateTypescriptConstants(Set<Card> cards) {
        final StringWriter stringWriter = new StringWriter();
        final PrintWriter out = new PrintWriter(stringWriter);
        out.println(
            "// ==== Start CodeGen -- this was generated by " +
                DeckConstantsCodeGen.class +
                " on " +
                Instant.now()
        );
        out.println("export const AllCards: Array<Card> = [");
        cards.forEach(card -> {
            final boolean special = card.val().isSpecial();
            out.print(
                """
                {
                  name: "%s",
                  shortName: "%s",
                  scoreValue: %d,
                """.indent(2)
                    .formatted(
                        card.name(),
                        card.shortName(),
                        card.val().scoreValue()
                    )
            );
            if (special) {
                out.println(
                    "    special: SpecialCards.%s,".formatted(card.name())
                );
            } else {
                out.print(
                    """
                    suit: CardSuit.%s,
                    number: %d,
                    """.indent(4)
                        .formatted(card.suit().name(), card.val().playOrder())
                );
            }
            out.print(
                """
                    type: "%s",
                  },
                """.formatted(special ? "special" : "normal")
            ); // no idea why this text-block doesn't need indent()
        });
        out.println("];");
        out.println("// ==== End CodeGen");

        return stringWriter.toString();
    }
}
