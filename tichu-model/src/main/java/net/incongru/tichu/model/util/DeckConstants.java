package net.incongru.tichu.model.util;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Map;
import java.util.TreeMap;
import net.incongru.tichu.model.card.Card;
import net.incongru.tichu.model.card.CardNumbers;
import net.incongru.tichu.model.card.CardSpecials;
import net.incongru.tichu.model.card.CardSuit;

/**
 *
 */
public class DeckConstants {

    /**
     * Gets a card by name, where the name is a constant defined in this class. This method
     * is case-insensitive, such that byName("r2")==byName("R2")
     *
     * @param n
     * @return
     */
    public static Card byName(String n) {
        final Card card = namedCards.get(n);
        if (card == null) {
            throw new IllegalArgumentException(n + " is not a valid card name");
        }
        return card;
    }

    // ==== Start CodeGen -- this was generated by class net.incongru.tichu.model.util.DeckConstantsCodeGen on 2024-12-05T05:04:12.015832Z
    // prettier-ignore
    public static final Card
            Phoenix = Card.of(CardSpecials.Phoenix),
            _P = Phoenix,
            MahJong = Card.of(CardSpecials.MahJong),
            _1 = MahJong,
            Dog = Card.of(CardSpecials.Dog),
            _H = Dog,
            Dragon = Card.of(CardSpecials.Dragon),
            _D = Dragon,
            Pagoda_2 = Card.of(CardNumbers.Two, CardSuit.Pagoda),
            B2 = Pagoda_2,
            Pagoda_3 = Card.of(CardNumbers.Three, CardSuit.Pagoda),
            B3 = Pagoda_3,
            Pagoda_4 = Card.of(CardNumbers.Four, CardSuit.Pagoda),
            B4 = Pagoda_4,
            Pagoda_5 = Card.of(CardNumbers.Five, CardSuit.Pagoda),
            B5 = Pagoda_5,
            Pagoda_6 = Card.of(CardNumbers.Six, CardSuit.Pagoda),
            B6 = Pagoda_6,
            Pagoda_7 = Card.of(CardNumbers.Seven, CardSuit.Pagoda),
            B7 = Pagoda_7,
            Pagoda_8 = Card.of(CardNumbers.Eight, CardSuit.Pagoda),
            B8 = Pagoda_8,
            Pagoda_9 = Card.of(CardNumbers.Nine, CardSuit.Pagoda),
            B9 = Pagoda_9,
            Pagoda_10 = Card.of(CardNumbers.Ten, CardSuit.Pagoda),
            B0 = Pagoda_10,
            B10 = Pagoda_10,
            Pagoda_Jack = Card.of(CardNumbers.Jack, CardSuit.Pagoda),
            BJ = Pagoda_Jack,
            Pagoda_Queen = Card.of(CardNumbers.Queen, CardSuit.Pagoda),
            BQ = Pagoda_Queen,
            Pagoda_King = Card.of(CardNumbers.King, CardSuit.Pagoda),
            BK = Pagoda_King,
            Pagoda_Ace = Card.of(CardNumbers.Ace, CardSuit.Pagoda),
            BA = Pagoda_Ace,
            Jade_2 = Card.of(CardNumbers.Two, CardSuit.Jade),
            G2 = Jade_2,
            Jade_3 = Card.of(CardNumbers.Three, CardSuit.Jade),
            G3 = Jade_3,
            Jade_4 = Card.of(CardNumbers.Four, CardSuit.Jade),
            G4 = Jade_4,
            Jade_5 = Card.of(CardNumbers.Five, CardSuit.Jade),
            G5 = Jade_5,
            Jade_6 = Card.of(CardNumbers.Six, CardSuit.Jade),
            G6 = Jade_6,
            Jade_7 = Card.of(CardNumbers.Seven, CardSuit.Jade),
            G7 = Jade_7,
            Jade_8 = Card.of(CardNumbers.Eight, CardSuit.Jade),
            G8 = Jade_8,
            Jade_9 = Card.of(CardNumbers.Nine, CardSuit.Jade),
            G9 = Jade_9,
            Jade_10 = Card.of(CardNumbers.Ten, CardSuit.Jade),
            G0 = Jade_10,
            G10 = Jade_10,
            Jade_Jack = Card.of(CardNumbers.Jack, CardSuit.Jade),
            GJ = Jade_Jack,
            Jade_Queen = Card.of(CardNumbers.Queen, CardSuit.Jade),
            GQ = Jade_Queen,
            Jade_King = Card.of(CardNumbers.King, CardSuit.Jade),
            GK = Jade_King,
            Jade_Ace = Card.of(CardNumbers.Ace, CardSuit.Jade),
            GA = Jade_Ace,
            Sword_2 = Card.of(CardNumbers.Two, CardSuit.Sword),
            K2 = Sword_2,
            Sword_3 = Card.of(CardNumbers.Three, CardSuit.Sword),
            K3 = Sword_3,
            Sword_4 = Card.of(CardNumbers.Four, CardSuit.Sword),
            K4 = Sword_4,
            Sword_5 = Card.of(CardNumbers.Five, CardSuit.Sword),
            K5 = Sword_5,
            Sword_6 = Card.of(CardNumbers.Six, CardSuit.Sword),
            K6 = Sword_6,
            Sword_7 = Card.of(CardNumbers.Seven, CardSuit.Sword),
            K7 = Sword_7,
            Sword_8 = Card.of(CardNumbers.Eight, CardSuit.Sword),
            K8 = Sword_8,
            Sword_9 = Card.of(CardNumbers.Nine, CardSuit.Sword),
            K9 = Sword_9,
            Sword_10 = Card.of(CardNumbers.Ten, CardSuit.Sword),
            K0 = Sword_10,
            K10 = Sword_10,
            Sword_Jack = Card.of(CardNumbers.Jack, CardSuit.Sword),
            KJ = Sword_Jack,
            Sword_Queen = Card.of(CardNumbers.Queen, CardSuit.Sword),
            KQ = Sword_Queen,
            Sword_King = Card.of(CardNumbers.King, CardSuit.Sword),
            KK = Sword_King,
            Sword_Ace = Card.of(CardNumbers.Ace, CardSuit.Sword),
            KA = Sword_Ace,
            Star_2 = Card.of(CardNumbers.Two, CardSuit.Star),
            R2 = Star_2,
            Star_3 = Card.of(CardNumbers.Three, CardSuit.Star),
            R3 = Star_3,
            Star_4 = Card.of(CardNumbers.Four, CardSuit.Star),
            R4 = Star_4,
            Star_5 = Card.of(CardNumbers.Five, CardSuit.Star),
            R5 = Star_5,
            Star_6 = Card.of(CardNumbers.Six, CardSuit.Star),
            R6 = Star_6,
            Star_7 = Card.of(CardNumbers.Seven, CardSuit.Star),
            R7 = Star_7,
            Star_8 = Card.of(CardNumbers.Eight, CardSuit.Star),
            R8 = Star_8,
            Star_9 = Card.of(CardNumbers.Nine, CardSuit.Star),
            R9 = Star_9,
            Star_10 = Card.of(CardNumbers.Ten, CardSuit.Star),
            R0 = Star_10,
            R10 = Star_10,
            Star_Jack = Card.of(CardNumbers.Jack, CardSuit.Star),
            RJ = Star_Jack,
            Star_Queen = Card.of(CardNumbers.Queen, CardSuit.Star),
            RQ = Star_Queen,
            Star_King = Card.of(CardNumbers.King, CardSuit.Star),
            RK = Star_King,
            Star_Ace = Card.of(CardNumbers.Ace, CardSuit.Star),
            RA = Star_Ace,
            Hound = Dog;
    // ==== End CodeGen

    private static final Map<String, Card> namedCards = cacheNamedCards();

    private static Map<String, Card> cacheNamedCards() {
        try {
            final Map<String, Card> namedCards = new TreeMap<>(
                String.CASE_INSENSITIVE_ORDER
            );
            final Field[] fields = DeckConstants.class.getFields();
            for (final Field field : fields) {
                int mod = field.getModifiers();
                if (
                    Modifier.isStatic(mod) &&
                    Modifier.isPublic(mod) &&
                    Modifier.isFinal(mod)
                ) {
                    if (Card.class.equals(field.getType())) {
                        final String fieldName = field.getName();
                        namedCards.put(
                            fieldName.toUpperCase(),
                            (Card) field.get(null)
                        );
                        // we know constants starting with _ are special cards and their shortName() impls start with a *
                        if (fieldName.startsWith("_")) {
                            namedCards.put(
                                fieldName.replace('_', '*').toUpperCase(),
                                (Card) field.get(null)
                            );
                        }
                    }
                }
            }
            return namedCards;
        } catch (IllegalAccessException e) {
            throw new RuntimeException(
                "Can't access field values of " +
                    DeckConstants.class +
                    ", is this system too secure?",
                e
            );
        }
    }
}
